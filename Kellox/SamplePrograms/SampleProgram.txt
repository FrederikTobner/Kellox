print "test\teyy\n";
class Doughnut 
{
	init(fryingColor)
	{
		this.fryingColor = fryingColor;
	}
	cook() 
	{
		println "Fry until " + this.fryingColor;
	}
}

class FilledDougnut < Doughnut 
{
	init(filling, fryingColor)
	{
		super.init(fryingColor);
		this.filling = filling;		
	}
	cook()
	{
		super.cook();
		println "With " + this.filling;
	}
}

class FilledDougnutWithChocolateCoat < FilledDougnut
{
	init(chocolateColor, filling, fryingColor)
	{
		super.init(filling, fryingColor);
		this.chocolateColor = chocolateColor;		
	}
	cook()
	{
		super.cook();
		println "And a " + this.chocolateColor + " chocolate coat";
	}
}

FilledDougnutWithChocolateCoat("dark", "custard", "golden brown").cook();

class LoxKlasse < Doughnut
{
	init(x, y, parentColor)
	{
		super.init(parentColor);
		this.x = x;
		this.y = y;
	}
}

print LoxKlasse(4, 3, "green");

print LoxKlasse(6, 4, "blue");

class Rect
{
	init(x, y)
	{
		this.x = x;
		this.y = y;
	}
	area()
	{
		return this.x * this.y * 0.5;
	}
}

println Rect(6, 5).area();

fun fibonacci()
{	
	var x = 0;
	var temp = 0;
	var b = 1;
	fun number()
	{
		temp = x;
		x = b;
		b = temp + x;
		return temp;
	}
	return number;
}

fun makeCounter() 
{
	var i = 0;
	fun count() 
	{
		return i++;
	}
	return count;
}

var counter = makeCounter();
println counter(); // "1".
println counter(); // "2"

println random(1, 5);

var zahl = 7;
println zahl;
zahl += 5;
println zahl;
zahl += 5;
println zahl;
zahl += 5;
println zahl;

// prints the first 25 fibonacci numbers
var fibo = fibonacci();
for (var i = 0; i < 25; i++) 
{
	println fibo();
}

fun Add(x, y)
{
	return x + y;
}

/* Hello, 
a blockcomment can have linebreaks in it!
ðŸ¥´
*/

println Add(123456, 654321);

fun Countdown(x)
{
	if(x >= 0)
	{
		println x;
		if(x >= 1)
		{
			wait(1);
		}
		Countdown(x--);
	}
}

Countdown(10);

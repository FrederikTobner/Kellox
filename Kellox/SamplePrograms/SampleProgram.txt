class Doughnut 
{
	init(fryingColor)
	{
		this.fryingColor = fryingColor;
	}
	cook() 
	{
		return "Fry until " + this.fryingColor;
	}
}

class FilledDougnut < Doughnut 
{
	init(fryingColor, filling)
	{
		super.init(fryingColor);
		this.filling = filling;		
	}
	cook()
	{
		return super.cook()+ ", filled with " + this.filling;
	}
}

class FilledDougnutWithChocolateCoat < FilledDougnut
{
	init(fryingColor, filling, chocolateColor)
	{
		super.init(fryingColor, filling);
		this.chocolateColor = chocolateColor;		
	}
	cook()
	{
		return super.cook() + " and a " + this.chocolateColor + " chocolate coat";
	}
}

class FilledDougnutWithChocolateCoatAndSprinkles < FilledDougnutWithChocolateCoat
{
	init(fryingColor, filling, chocolateColor, sprinkleColor)
	{
		super.init(fryingColor, filling, chocolateColor);
		this.sprinkleColor = sprinkleColor;		
	}
	cook()
	{
		return super.cook() +" with " + this.sprinkleColor + " sprinkles on top";
	}
}

// very tasty 🍩
var donut = FilledDougnutWithChocolateCoatAndSprinkles("golden brown", "custard", "dark", "rainbow");
println donut.cook();
println donut;

class DoughnutPair
{
	init(firstDonut, secondDonut)
	{
		this.firstDonut = firstDonut;
		this.secondDonut = secondDonut;
	}
	cook()
	{
		return this.firstDonut.cook() + "\n" + this.secondDonut.cook();
	}
}

class DoughnutPairPair
{
	init(firstDonutPair, secondDonutPair)
	{
		this.firstDonutPair = firstDonutPair;
		this.secondDonutPair = secondDonutPair;
	}
	cook()
	{
		return this.firstDonutPair.cook() + "\n" + this.secondDonutPair.cook();
	}
}

var donuts = DoughnutPair(donut, FilledDougnutWithChocolateCoatAndSprinkles("golden brown", "raspberry jelly", "white", "red"));

println DoughnutPairPair(donuts, donuts);

class Rect
{
	init(x, y)
	{
		this.x = x;
		this.y = y;
	}
	area()
	{
		return this.x * this.y * 0.5;
	}
}

println Rect(6, 5).area();

fun fibonacci()
{	
	var x = 0;
	var temp = 0;
	var b = 1;
	fun number()
	{
		temp = x;
		x = b;
		b = temp + x;
		return temp;
	}
	return number;
}

fun makeCounter() 
{
	var i = 0;
	fun count() 
	{
		return i++;
	}
	return count;
}

var counter = makeCounter();
println counter(); // "1".
println counter(); // "2"

println random(1, 5);

var zahl = 7;
println zahl;
zahl += 5;
println zahl;
zahl += 5;
println zahl;
zahl += 5;
println zahl;

// prints the first 25 fibonacci numbers
var fibo = fibonacci();
for (var i = 0; i < 25; i++) 
{
	println fibo();
}

fun Add(x, y)
{
	return x + y;
}

/* Hello, 
a blockcomment can have linebreaks in it!
🥴
*/

println Add(123456, 654321);

fun Countdown(x)
{
	if(x >= 0)
	{
		println x;
		if(x >= 1)
		{
			wait(1);
		}
		Countdown(x--);
	}
}

Countdown(10);

